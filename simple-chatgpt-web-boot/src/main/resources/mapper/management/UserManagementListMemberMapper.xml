<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="simple.chatgpt.mapper.management.UserManagementListMemberMapper">

	<!-- ======================= RESULT MAP for POJO ======================= -->
	<resultMap id="UserManagementListMemberResultMap"
		type="simple.chatgpt.pojo.management.UserManagementListMemberPojo">
		<id property="id" column="id" />
		<result property="listId" column="list_id" />
		<result property="userName" column="user_name" />
		<result property="userKey" column="user_key" />
		<result property="password" column="password" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="email" column="email" />
		<result property="addressLine1" column="address_line_1" />
		<result property="addressLine2" column="address_line_2" />
		<result property="city" column="city" />
		<result property="state" column="state" />
		<result property="postCode" column="post_code" />
		<result property="country" column="country" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
	</resultMap>

	<!-- ======= 5 CORE METHODS (on top) ======= -->

	<!-- void create(@Param("entity") entityPojo entity) -->
	<!-- ======================= CREATE ======================= -->
	<insert id="create" parameterType="map" useGeneratedKeys="true" keyProperty="member.id">
		INSERT INTO user_management_list_member
		(list_id,
		user_name, user_key, password, first_name, last_name, email,
		address_line_1, address_line_2, city, state, post_code, country)
		VALUES
		(#{member.listId}, #{member.userName}, #{member.userKey},
		#{member.password}, #{member.firstName}, #{member.lastName},
		#{member.email},
		#{member.addressLine1}, #{member.addressLine2},
		#{member.city}, #{member.state}, #{member.postCode},
		#{member.country})
	</insert>

	<!-- void update(@Param("id") Long id, @Param("entity") entityPojo entity) -->
	<!-- ======================= UPDATE ======================= -->
	<update id="update" parameterType="map">
		UPDATE user_management_list_member
		<set>
			updated_at = NOW(),
			<if test="member.userName != null">user_name = #{member.userName},</if>
			<if test="member.userKey != null">user_key = #{member.userKey},</if>
			<if test="member.password != null">password = #{member.password},</if>
			<if test="member.firstName != null">first_name = #{member.firstName},</if>
			<if test="member.lastName != null">last_name = #{member.lastName},</if>
			<if test="member.email != null">email = #{member.email},</if>
			<if test="member.addressLine1 != null">address_line_1 = #{member.addressLine1},</if>
			<if test="member.addressLine2 != null">address_line_2 = #{member.addressLine2},</if>
			<if test="member.city != null">city = #{member.city},</if>
			<if test="member.state != null">state = #{member.state},</if>
			<if test="member.postCode != null">post_code = #{member.postCode},</if>
			<if test="member.country != null">country = #{member.country},</if>
		</set>
		WHERE id = #{id}
	</update>

	<!-- ======================= SQL fragment for filtering/search ======================= -->
	<sql id="UserManagementListMemberFilter">
		<where>
			<if test="params.member != null or params != null">
				<if
					test="(params.member != null and params.member.listId != null) or (params.listId != null)">
					AND list_id =
					<choose>
						<when
							test="params.member != null and params.member.listId != null">#{params.member.listId}</when>
						<otherwise>#{params.listId}</otherwise>
					</choose>
				</if>
				<if
					test="(params.member != null and params.member.userName != null and params.member.userName != '') 
                          or (params.userName != null and params.userName != '')">
					AND user_name LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.userName != null and params.member.userName != ''">#{params.member.userName}</when>
						<otherwise>#{params.userName}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.userKey != null and params.member.userKey != '') 
                          or (params.userKey != null and params.userKey != '')">
					AND user_key LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.userKey != null and params.member.userKey != ''">#{params.member.userKey}</when>
						<otherwise>#{params.userKey}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.firstName != null and params.member.firstName != '') 
                          or (params.firstName != null and params.firstName != '')">
					AND first_name LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.firstName != null and params.member.firstName != ''">#{params.member.firstName}</when>
						<otherwise>#{params.firstName}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.lastName != null and params.member.lastName != '') 
                          or (params.lastName != null and params.lastName != '')">
					AND last_name LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.lastName != null and params.member.lastName != ''">#{params.member.lastName}</when>
						<otherwise>#{params.lastName}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.email != null and params.member.email != '') 
                          or (params.email != null and params.email != '')">
					AND email LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.email != null and params.member.email != ''">#{params.member.email}</when>
						<otherwise>#{params.email}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.addressLine1 != null and params.member.addressLine1 != '') 
                          or (params.addressLine1 != null and params.addressLine1 != '')">
					AND address_line_1 LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.addressLine1 != null and params.member.addressLine1 != ''">#{params.member.addressLine1}</when>
						<otherwise>#{params.addressLine1}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.addressLine2 != null and params.member.addressLine2 != '') 
                          or (params.addressLine2 != null and params.addressLine2 != '')">
					AND address_line_2 LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.addressLine2 != null and params.member.addressLine2 != ''">#{params.member.addressLine2}</when>
						<otherwise>#{params.addressLine2}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.city != null and params.member.city != '') 
                          or (params.city != null and params.city != '')">
					AND city LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.city != null and params.member.city != ''">#{params.member.city}</when>
						<otherwise>#{params.city}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.state != null and params.member.state != '') 
                          or (params.state != null and params.state != '')">
					AND state LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.state != null and params.member.state != ''">#{params.member.state}</when>
						<otherwise>#{params.state}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.postCode != null and params.member.postCode != '') 
                          or (params.postCode != null and params.postCode != '')">
					AND post_code LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.postCode != null and params.member.postCode != ''">#{params.member.postCode}</when>
						<otherwise>#{params.postCode}</otherwise>
					</choose>
					, '%')
				</if>
				<if
					test="(params.member != null and params.member.country != null and params.member.country != '') 
                          or (params.country != null and params.country != '')">
					AND country LIKE CONCAT('%',
					<choose>
						<when
							test="params.member != null and params.member.country != null and params.member.country != ''">#{params.member.country}</when>
						<otherwise>#{params.country}</otherwise>
					</choose>
					, '%')
				</if>
			</if>
		</where>
	</sql>

    <!-- List<entityPojo> search(@Param("params") Map<String, Object> params) -->
	<!-- ======================= SEARCH / PAGINATION ======================= -->
	<select id="search" parameterType="map" resultMap="UserManagementListMemberResultMap">
		SELECT * FROM user_management_list_member
		<include refid="UserManagementListMemberFilter" />
		<if
			test="params.sortField != null and params.sortDirection != null">
			ORDER BY ${params.sortField} ${params.sortDirection}
		</if>
		<if test="params.offset != null and params.limit != null">
			LIMIT #{params.offset}, #{params.limit}
		</if>
	</select>

	<!-- entityPojo get(@Param("id") Long id) -->
	<!-- ======================= READ ======================= -->
	<select id="get" parameterType="long" resultMap="UserManagementListMemberResultMap">
		SELECT * FROM
		user_management_list_member WHERE id = #{id}
	</select>

	<!-- void delete(@Param("id") Long id) -->
	<!-- ======================= DELETE ======================= -->
	<delete id="delete" parameterType="long">
		DELETE FROM user_management_list_member WHERE id =
		#{id}
	</delete>

	<!-- ======= OTHER METHODS ======= -->

</mapper>
